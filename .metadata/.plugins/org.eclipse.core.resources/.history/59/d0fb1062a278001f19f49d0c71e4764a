package com.project.cars.resources;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.project.cars.entities.Cars;
import com.project.cars.repositories.CarsRepository;

/*@RestController
@RequestMapping(value = "/cars")
public class CarsResource {

		//Balaceamento de carga========
		private static Logger logger = LoggerFactory.getLogger(CarsResource.class);
		@Autowired
		private Environment env;
		////Balaceamento de carga========
		
		@Autowired
		private CarsRepository repository;
		
		@GetMapping
		public ResponseEntity<List<Cars>> findAll(){
			List<Cars> list = repository.findAll();
			return ResponseEntity.ok(list);
		}
		
		@GetMapping(value = "/{id}")
		public ResponseEntity<Cars> findById(@PathVariable Long id){
			
			//Balaceamento de carga========
			//logger.info("PORT = " + env.getProperty("local.servr.port"));
			//Balaceamento de carga========
			
			try {
				Thread.sleep(3000L);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			
			logger.info("PORT = " + env.getProperty("local.server.port"));
			
			Cars obj = repository.findById(id).get();
			return ResponseEntity.ok(obj);
		}
}*/
@Service
public class CarsResource {
		
	private Logger logger = LoggerFactory.getLogger(CarsResource.class);
		
	@Autowired
	CarsRepository repository;

	public List<Books> findAll() {

		logger.info("Finding all people!");

		return repository.findAll();
	}

	public Books findById(Long id) {
			
		logger.info("Finding one person!");
			
		return repository.findById(id)
			.orElseThrow();
	}
		
	public Books create(Books books) {

		logger.info("Creating one person!");
			
		return repository.save(books);
	}
		
	public Books update(Books books) {
			
		logger.info("Updating one person!");
			
		var entity = repository.findById(books.getId())
			.orElseThrow();

		((Books) entity).setName(books.getName());  
		((Books) entity).setGender(books.getGender());
		((Books) entity).setRentalday(books.getRentalday());
			
		return repository.save(books);
	}
		
	public void delete(Long id) {
			
		logger.info("Deleting one person!");
			
		var entity = repository.findById(id)
				.orElseThrow();
		repository.delete(entity);
	}
}



